<script type="javascript" runat="server">
    Platform.Load("core","1"); 
    var ip = Platform.Request.ClientIP();
    /*Write("Your IP: " + ip);*/
    Variable.SetValue("@ip",ip)
</script>
%%[

IF (indexOf(@ip,"13.111.17") > 0 OR indexOf(@ip,"95.90.198.250") > 0) THEN



 SET @newSubs = LookUpRows('Unsubscribers_3h','Active','true')
 
 FOR @i = 1 TO RowCount(@newSubs) DO
  /* Get Data */
  SET @row = Row(@newSubs,@i)
  SET @sk = FIELD(@row,"SubscriberKey")
  SET @lu = FIELD(@row,"Date")
  SET @email = FIELD(@row , "Email")
  SET @tok = FIELD(@row , "Token")
  SET @news = FIELD(@row, "Newsletter")
  SET @now = NOW()
  
  
    /* Set Subscriber Status to Active */

  /*SET @Subscriber = CreateObject("Subscriber")
  SetObjectProperty(@Subscriber, "SubscriberKey",@sk)
  SetObjectProperty(@Subscriber, "EmailAddress", @email)
  SetObjectProperty(@Subscriber, "Status", "Active" )
  SET @status = InvokeUpdate(@Subscriber, @createErrDesc, @createErrNo, @createOpts)*/

    SET @ll_sub = CreateObject("Subscriber")

    SetObjectProperty(@ll_sub,"EmailAddress", @email)
    SetObjectProperty(@ll_sub,"SubscriberKey", @sk)

    SET @client = CreateObject("ClientID")
    SetObjectProperty(@client, "ID", "515011413") /* 7200736 7331165 */
    SetObjectProperty(@client, "IDSpecified", "true")
    SetObjectProperty(@ll_sub, "Client", @client)

    SetObjectProperty(@ll_sub,"Status", "Active")
    Set @options = CreateObject("UpdateOptions")
    Set @save = CreateObject("SaveOption")
    SetObjectProperty(@save,"SaveAction","UpdateOnly")
    SetObjectProperty(@save,"PropertyName","Status")
    AddObjectArrayItem(@options,"SaveOptions", @save)


    Set @status = InvokeUpdate(@ll_sub, @update_sub_status, @update_sub_errorcode, @options)
    output(concat("Status: ", @status,"<br>"))

    /* Save Logs */

    var @log

    SET @log = InsertDE("Resubscription log", "SubscriberKey", @sk ,"LastUpdate",@lu,"ResubDate", NOW() ,"Status",@status,"StatusMessage",@update_sub_status) 
    
]%%
    <script runat="server">
    var tok = Variable.GetValue("@tok");
    var url = ('https://gruppenkonto.spiegel.de/newsletter-abbestellen.html?t=' + tok);
    /*var url = 'https://gruppenkonto.spiegel.de/newsletter-abbestellen.html?t=';*/
    var contentType = 'application/json';
    var payload = '{}';
    var content = [0];
    var names = [];
    var values = []; 
    
    var lu = Variable.GetValue("@lu");
    var sk = Variable.GetValue("@sk");
    var email = Variable.GetValue("@email");
    var Newsletter = Variable.GetValue("@news");
    var now = Variable.GetValue("@now");
    var tok = Variable.GetValue("@tok");


    var arrContacts =  [{UnsubDate:lu, SubscriberKey:sk, Email:email, Newsletter: Newsletter, Unsubscribe_Token : tok, SendDate : now , Response : " " , Status : status}];







    
    try {
    
     
     var statusCode = Platform.Function.HTTPPost(url,contentType,payload,names,values,content);
     if (statusCode == 200)  {
          Platform.Response.Write(content[0]);
          var test= 'okay';

          



          var status = "success"; 
          /*var Backoffice_log = DataExtension.Init("Backoffice_log");*/
          /*Backoffice_log.Rows.Add({UnsubDate:lu, SubscriberKey:sk, Email:email, Newsletter: Newsletter, Unsubscribe_Token : tok, SendDate : now , Response : " " , Status : status});*/
          var rows = Platform.Function.UpsertData("Backoffice_log",["SubscriberKey", "UnsubDate" , "Newsletter"],[sk ,lu ,Newsletter],["status"],[status]);

          
     }

     else {
          var status = "error"; 
          /*var Backoffice_log = DataExtension.Init("Backoffice_log");*/
          /*Backoffice_log.Rows.Add({UnsubDate:lu, SubscriberKey:sk, Email:email, Newsletter: Newsletter, Unsubscribe_Token : tok, SendDate : now , Response : " " , Status : status});*/
          var rows = Platform.Function.UpsertData("Backoffice_log",["SubscriberKey"],[sk],["status"],[status]);
          var test= 'no';



     }
     


   //%%[SET @log1 = InsertDE('Backoffice_log', 'UnsubDate', @lu, 'SubscriberKey', @sk, 'Email', @email, 'Newsletter', @news , 'Unsubscribe_Token', @tok ,'SendDate', NOW(), 'Response', ' ', 'Status', 'success' )]%%//


}      catch (e) {

  Write("<br>e: " + Stringify(e));
  var status = "error"; 
  var rows = Platform.Function.UpsertData("Backoffice_log",["UnsubDate", "SubscriberKey", "Newsletter"],[lu ,sk ,Newsletter],["Email", "Unsubscribe_Token", "SendDate", "Response", "Status"],[email, tok, now , 'NA', status]);
  var test= 'no';





  //%%[SET @log1 = InsertDE('Backoffice_log', 'UnsubDate', @lu, 'SubscriberKey', @sk, 'Email', @email, 'Newsletter', @news , 'Unsubscribe_Token', @tok ,'SendDate', NOW(), 'Response', ' ', 'Status', 'error' )]%%//
  /*var Backoffice_log_ = DataExtension.Init("Backoffice_log");
  Backoffice_log_.Rows.Add({UnsubDate:lu, SubscriberKey:sk, Email:email, Newsletter: Newsletter, Unsubscribe_Token : tok, SendDate : now , Response : " " , Status : status});*/


}
          Variable.SetValue("@test","test");


    </script> 
    


    %%[   
    ]%%


%%[ 



SET @date = format(now(),"yyyy-MM-ddThh:mm:ss")
Output(Concat("Date: ", @date))

 NEXT @i
 
ELSE

]%%NO ACCESS%%[
 
ENDIF

]%%

%%=v(@sk)=%%



